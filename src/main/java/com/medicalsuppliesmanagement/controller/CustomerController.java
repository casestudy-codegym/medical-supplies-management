package com.medicalsuppliesmanagement.controller;

import com.medicalsuppliesmanagement.entity.Customer;
import com.medicalsuppliesmanagement.service.impl.CustomerService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/management")
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    // üìÑ Danh s√°ch kh√°ch h√†ng v·ªõi ph√¢n trang v√† t√¨m ki·∫øm
    @GetMapping("/customers")
    public String listCustomers(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String type,
            Model model) {

        int size = 10;
        Page<?> customerPage = customerService.searchCustomers(keyword, type, page, size);

        model.addAttribute("customers", customerPage.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", customerPage.getTotalPages());
        model.addAttribute("keyword", keyword);
        model.addAttribute("type", type);
        return "customer/list";
    }

    // üîÑ Hi·ªÉn th·ªã form th√™m m·ªõi
    @GetMapping("/new")
    public String showAddForm(Model model) {
        model.addAttribute("customer", new Customer());
        model.addAttribute("action", "Th√™m kh√°ch h√†ng");
        return "customer/add";
    }

    @PostMapping("/new")
    public String addCustomer(@Valid @ModelAttribute Customer customer, BindingResult result, Model model, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            model.addAttribute("action", "Th√™m kh√°ch h√†ng");
            return "customer/add";
        }

        if (customerService.findByCustomerCode(customer.getCustomerCode()).isPresent()) {
            result.rejectValue("customerCode", "error.customer", "M√£ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i");
            model.addAttribute("action", "Th√™m kh√°ch h√†ng");
            return "customer/add";
        }

        customerService.save(customer);
        redirectAttributes.addFlashAttribute("successMessage", "Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
        return "redirect:/management/customers";
    }

    // ‚úèÔ∏è Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
    @GetMapping("/edit/{id}")
    public String showEditForm(@PathVariable Long id, Model model, RedirectAttributes redirectAttributes) {
        Customer customer = customerService.findById(id);
        if (customer == null) {
            redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!");
            return "redirect:/management/customers";
        }

        model.addAttribute("customer", customer);
        model.addAttribute("action", "Ch·ªânh s·ª≠a kh√°ch h√†ng");
        return "customer/update";
    }

    @PostMapping("/edit/{id}")
    public String updateCustomer(@PathVariable Long id, @Valid @ModelAttribute Customer customer,
                                 BindingResult result, Model model, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            model.addAttribute("action", "Ch·ªânh s·ª≠a kh√°ch h√†ng");
            return "customer/update";
        }

        // Ki·ªÉm tra tr√πng m√£ kh√°ch h√†ng
        if (customerService.findByCustomerCode(customer.getCustomerCode()).isPresent() &&
                !customer.getCustomerId().equals(id)) {
            result.rejectValue("customerCode", "error.customer", "M√£ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i");
            model.addAttribute("action", "Ch·ªânh s·ª≠a kh√°ch h√†ng");
            return "customer/update";
        }

        customer.setCustomerId(id);
        customerService.update(customer);
        redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng!");
        return "redirect:/management/customers";
    }

    // üóëÔ∏è X√≥a kh√°ch h√†ng ƒë∆°n l·∫ª
    @PostMapping("/customers/delete/{id}")
    public String deleteCustomer(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            Customer customer = customerService.findById(id);
            if (customer == null) {
                redirectAttributes.addFlashAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng c·∫ßn x√≥a!");
                return "redirect:/management/customers";
            }

            customerService.deleteById(id);
            redirectAttributes.addFlashAttribute("successMessage",
                    "ƒê√£ x√≥a kh√°ch h√†ng: " + customer.getName());
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage",
                    "Kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng. C√≥ th·ªÉ kh√°ch h√†ng ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h·ªá th·ªëng!");
        }
        return "redirect:/management/customers";
    }

    // üóëÔ∏è X√≥a nhi·ªÅu kh√°ch h√†ng
    @PostMapping("/customers/delete-multiple")
    public String deleteSelected(@RequestParam(value = "selectedIds", required = false) List<Long> ids,
                                 RedirectAttributes redirectAttributes) {
        if (ids == null || ids.isEmpty()) {
            redirectAttributes.addFlashAttribute("warningMessage", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kh√°ch h√†ng ƒë·ªÉ x√≥a!");
            return "redirect:/management/customers";
        }

        try {
            customerService.deleteByIds(ids);
            redirectAttributes.addFlashAttribute("successMessage",
                    "ƒê√£ x√≥a th√†nh c√¥ng " + ids.size() + " kh√°ch h√†ng!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage",
                    "Kh√¥ng th·ªÉ x√≥a m·ªôt s·ªë kh√°ch h√†ng. C√≥ th·ªÉ ch√∫ng ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h·ªá th·ªëng!");
        }

        return "redirect:/management/customers";
    }
}